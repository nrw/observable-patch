{
  "name": "patcher",
  "version": "0.0.6",
  "description": "Object patching and replication for JavaScript",
  "main": "./index.js",
  "keywords": [
    "replication",
    "patching"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mikolalysenko/patcher.js"
  },
  "directories": {
    "lib": ".",
    "examples": "./examples"
  },
  "dependencies": {},
  "devDependencies": {},
  "engine": {
    "node": ">=0.4.0"
  },
  "author": {
    "name": "Mikola Lysenko",
    "email": "mikolalysenko@gmail.com",
    "url": "http://0fps.wordpress.com"
  },
  "readme": "\n              _        _               _     \n             | |      | |             (_)    \n  _ __   __ _| |_  ___| |__   ___ _ __ _ ___ \n | '_ \\ / _` | __|/ __| '_ \\ / _ \\ '__| / __|\n | |_) | (_| | |_| (__| | | |  __/ | _| \\__ \\\n | .__/ \\__,_|\\__|\\___|_| |_|\\___|_|(_) |___/\n | |                                 _/ |    \n |_|                                |__/     \n\n=================================================\n\n   A JSON patching and diffing library\n   \n    (c) 2011 Mikola Lysenko\n   \n=================================================\n\n1. About\n\npatcher.js is a simple javascript library for diffing and\npatching JSON documents.  This can be useful, for example,\nin a networked environment where retransmitting large JSON\ndocuments is too expensive.\n\n\n2. Example:\n\n>\n> //Start with two distinct objects on the server\n> // prev represents a copy of the state of the object on the client\n> // next represents a copy of the state of the object on the server\n> //\n> //1. Compute a patch\n> patch = patcher.computePatch(prev, next);\n> \n> //2. Send patch over the network\n>\n> //3. Apply the patch on the client\n> patcher.applyPatch(prev, patch);\n> \n> //Final invariant:\n> //   prev represents an equivalent object to JSON.parse(JSON.stringify(next))\n>\n\n\n\n3.  API\n\nThere are two functions in patcher.js:\n\n  function computePatch(prev, next, update_in_place);\n\n  The argument prev is the object which the patch targets.\n  \n    * If update_in_place is set to true, then the function\n    will simultaneously update both prev and next at the same\n    time.\n    * If prev and next are equal, then the method returns null\n    * Constructing this patch requires time linear on the \n    size of the two documents.\n    * Patches are computed at the level of the objects and\n    arrays.  String modifications are simply retransmitted\n    \n  \n  \n  function applyPatch(obj, patch)\n  \n  This function applies a patch to the JSON document obj\n\n\n4. Future\n\n  * More test cases!\n  * Use data types cleverly\n  * Binary serialization\n",
  "readmeFilename": "README",
  "bugs": {
    "url": "https://github.com/mikolalysenko/patcher.js/issues"
  },
  "homepage": "https://github.com/mikolalysenko/patcher.js",
  "_id": "patcher@0.0.6",
  "dist": {
    "shasum": "77031f8ca77341dcf50984b832cdd5b47868ea33"
  },
  "_from": "patcher@",
  "_resolved": "https://registry.npmjs.org/patcher/-/patcher-0.0.6.tgz"
}
